# Generated by Django 4.2.10 on 2024-05-06 01:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_lifecycle.mixins
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('saude', '0001_initial'),
        ('saude_cadastro', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Farmacia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('nome_farmacia', models.CharField(error_messages={'unique': 'Uma farmácia com esse nome já existe.'}, max_length=200, unique=True, verbose_name='Nome')),
                ('tipo_farmacia', models.IntegerField(choices=[(0, 'CENTRAL'), (1, 'SETORIAL')], default=0, verbose_name='Tipo da farmácia')),
                ('situacao_farmacia', models.SmallIntegerField(choices=[(0, 'ATIVO'), (1, 'INATIVO')], default=0, verbose_name='Situação')),
                ('farmacia_superior', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='saude_farmacia.farmacia', verbose_name='Farmácia Superior')),
                ('setor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='saude_cadastro.unidadesetor', verbose_name='Setor')),
                ('unidade_saude', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='saude.unidadesaude', verbose_name='Unidade de saúde')),
            ],
            options={
                'verbose_name': 'Farmácia',
                'verbose_name_plural': 'Farmácias',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Insumo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('nome_insumo', models.CharField(error_messages={'unique': 'Um insumo com esse nome já existe.'}, max_length=200, null=True, unique=True, verbose_name='Nome')),
                ('codigo_de_barra', models.CharField(error_messages={'unique': 'Um insumo com esse código de barra já existe. '}, max_length=50, null=True, unique=True, verbose_name='Código de barra')),
                ('descricao_insumo', models.TextField(blank=True, verbose_name='Descrição')),
                ('situacao_insumo', models.SmallIntegerField(choices=[(0, 'ATIVO'), (1, 'INATIVO')], default=0, verbose_name='Situação')),
                ('estoque_minimo_geral', models.IntegerField(null=True, verbose_name='Estoque mínimo geral')),
                ('unidade_saude', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='saude.unidadesaude', verbose_name='Unidade de saúde')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InsumoRequisitado',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('quantidade_insumo', models.IntegerField(blank=True)),
                ('unidade_insumo', models.CharField(blank=True, choices=[('UN', 'Unidade'), ('CX', 'Caixa')], max_length=2)),
                ('insumo', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='saude_farmacia.insumo')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Medicamento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('nome_medicamento', models.CharField(error_messages={'unique': 'Um medicamento com esse nome já existe.'}, max_length=200, unique=True, verbose_name='Nome')),
                ('codigo_de_barra', models.CharField(error_messages={'unique': 'Um medicamento com esse código de barra já existe. '}, max_length=50, unique=True, verbose_name='Código de barra')),
                ('descricao_medicamento', models.TextField(blank=True, verbose_name='Descrição')),
                ('tipo_medicamento', models.IntegerField(choices=[(0, 'BÁSICO'), (1, 'ESPECIALIZADO'), (2, 'ESTRATÉGICO')], default=0)),
                ('situacao_medicamento', models.SmallIntegerField(choices=[(0, 'ATIVO'), (1, 'INATIVO')], default=0, verbose_name='Situação')),
                ('estoque_minimo_geral', models.IntegerField(verbose_name='Estoque mínimo geral')),
            ],
            options={
                'verbose_name': 'Medicamento',
                'verbose_name_plural': 'Medicamentos',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MedicamentoRequisitado',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('quantidade_medicamento', models.IntegerField(blank=True)),
                ('unidade_medicamento', models.CharField(blank=True, choices=[('UN', 'Unidade'), ('CX', 'Caixa')], max_length=2)),
                ('medicamento', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='saude_farmacia.medicamento')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PrincipioAtivo',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('nome', models.CharField(max_length=255, unique=True, verbose_name='Nome')),
            ],
            options={
                'verbose_name': 'Princípio Ativo',
                'verbose_name_plural': 'Princípios Ativos',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Produto',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('nome_produto', models.CharField(error_messages={'unique': 'Um produto com esse nome já existe.'}, max_length=200, unique=True, verbose_name='Nome')),
                ('tipo_produto', models.IntegerField(choices=[(0, 'PRODUTO MÉDICO ATIVO'), (1, 'PRODUTO MÉDICO ATIVO PARA DIAGNÓSTICO'), (2, 'PRODUTO MÉDICO ATIVO PARA TERAPIA'), (3, 'PRODUTO MÉDICO DE USO ÚNICO'), (4, 'PRODUTO MÉDICO IMPLANTÁVEL'), (5, 'PRODUTO MÉDICO INVASIVO'), (6, 'PRODUTO MÉDICO INVASIVO CIRURGICAMENTE'), (7, 'PRODUTO PARA DIAGNÓSTICO IN VITRO')], default=0, verbose_name='Tipo do produto')),
                ('codigo_de_barra', models.CharField(error_messages={'unique': 'Um produto com esse código de barra já existe. '}, max_length=50, unique=True, verbose_name='Código de barra')),
                ('estoque_minimo_geral', models.IntegerField(verbose_name='Estoque mínimo geral')),
                ('situacao_produto', models.SmallIntegerField(choices=[(0, 'ATIVO'), (1, 'INATIVO')], default=0, verbose_name='Situação')),
                ('descricao_produto', models.TextField(blank=True, verbose_name='Descrição')),
                ('unidade_saude', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='saude.unidadesaude', verbose_name='Unidade de saúde')),
            ],
            options={
                'verbose_name': 'Produto',
                'verbose_name_plural': 'Produtos',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProdutoRequisitado',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('quantidade_produto', models.IntegerField(blank=True)),
                ('unidade_produto', models.CharField(blank=True, choices=[('UN', 'Unidade'), ('CX', 'Caixa')], max_length=2)),
                ('produto', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='saude_farmacia.produto')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RequisicaoMaterialFarmacia',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('numero_pedido', models.CharField(max_length=12)),
                ('data_solicitacao', models.DateTimeField(auto_now=True)),
                ('data_entrada', models.DateTimeField(blank=True, null=True)),
                ('situacao_requisicao', models.IntegerField(choices=[(0, 'SOLICITADO'), (1, 'DEFERIDO'), (2, 'CONCLUÍDO'), (3, 'REJEITADO')], default=0)),
                ('farmaceutico_solicitante', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='saude_cadastro.profissional')),
                ('farmacia', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='saude_farmacia.farmacia')),
                ('insumo_requisitado', models.ManyToManyField(blank=True, to='saude_farmacia.insumorequisitado')),
                ('medicamento_requisitado', models.ManyToManyField(blank=True, to='saude_farmacia.medicamentorequisitado')),
                ('produto_requisitado', models.ManyToManyField(blank=True, to='saude_farmacia.produtorequisitado')),
                ('unidade_saude', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='saude.unidadesaude', verbose_name='Unidade de saúde')),
            ],
            options={
                'abstract': False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.AddField(
            model_name='medicamento',
            name='principio_ativo_medicamento',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='saude_farmacia.principioativo', verbose_name='Princípio ativo do medicamento'),
        ),
        migrations.AddField(
            model_name='medicamento',
            name='unidade_saude',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='saude.unidadesaude', verbose_name='Unidade de saúde'),
        ),
        migrations.CreateModel(
            name='HistoricalFarmacia',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Atualizado em')),
                ('nome_farmacia', models.CharField(db_index=True, error_messages={'unique': 'Uma farmácia com esse nome já existe.'}, max_length=200, verbose_name='Nome')),
                ('tipo_farmacia', models.IntegerField(choices=[(0, 'CENTRAL'), (1, 'SETORIAL')], default=0, verbose_name='Tipo da farmácia')),
                ('situacao_farmacia', models.SmallIntegerField(choices=[(0, 'ATIVO'), (1, 'INATIVO')], default=0, verbose_name='Situação')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('farmacia_superior', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='saude_farmacia.farmacia', verbose_name='Farmácia Superior')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('setor', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='saude_cadastro.unidadesetor', verbose_name='Setor')),
                ('unidade_saude', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='saude.unidadesaude', verbose_name='Unidade de saúde')),
            ],
            options={
                'verbose_name': 'historical Farmácia',
                'verbose_name_plural': 'historical Farmácias',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
