# Generated by Django 4.2.10 on 2024-05-06 01:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_lifecycle.mixins
import publicmanager.saude_atendimento.models
import simple_history.models
import smart_selects.db_fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('saude', '0002_initial'),
        ('comum', '0001_initial'),
        ('saude_cadastro', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AgendamentoConsultorio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_paciente', models.CharField(help_text='Nome do Paciente', max_length=200, verbose_name='Nome do Paciente')),
                ('cpf_paciente', models.CharField(blank=True, help_text='CPF', max_length=14, null=True, verbose_name='CPF')),
                ('celular_paciente', models.CharField(blank=True, help_text='Celular', max_length=15, null=True, verbose_name='Celular')),
                ('telefone_fixo_paciente', models.CharField(blank=True, help_text='Telefone Fixo', max_length=14, null=True, verbose_name='Telefone Fixo')),
                ('tipo_atendimento', models.IntegerField(choices=[(0, 'Primeiro atendimento'), (1, 'Extra encaixe'), (2, 'Retorno')], default=0)),
                ('data_atendimento', models.DateField(blank=True, null=True)),
                ('hora_inicio_atendimento', models.TimeField(blank=True, null=True)),
                ('hora_termino_atendimento', models.TimeField(blank=True, null=True)),
                ('observacoes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Agenda Médica',
                'verbose_name_plural': 'Agenda Médica',
            },
        ),
        migrations.CreateModel(
            name='AnamnesePaciente',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('tem_doenca_neurologica', models.BooleanField(default=False, verbose_name='Tem doença neurológica?')),
                ('tem_doenca_psicologica', models.BooleanField(default=False, verbose_name='Tem doença psicológica?')),
                ('tem_hipertensao_arterial', models.BooleanField(default=False, verbose_name='Tem hipertensão arterial?')),
                ('tem_doenca_do_sangue', models.BooleanField(default=False, verbose_name='Tem doença do sangue?')),
                ('fez_recebeu_transfusao_ultimos_3_meses', models.BooleanField(default=False, verbose_name='Fez ou recebeu transfusão nos últimos 3 meses?')),
                ('teve_avc_derrame', models.BooleanField(default=False, verbose_name='Teve AVC / derrame?')),
                ('estar_com_tuberculose', models.BooleanField(default=False, verbose_name='Está com tuberculose?')),
                ('estar_com_hanseniase', models.BooleanField(default=False, verbose_name='Está com hanseníase?')),
                ('estar_fumante', models.BooleanField(default=False, verbose_name='Está fumante?')),
                ('faz_uso_alcool', models.BooleanField(default=False, verbose_name='Faz uso de álcool?')),
                ('faz_uso_drogas', models.BooleanField(default=False, verbose_name='Faz uso de drogas?')),
                ('faz_exercicio_fisicos', models.BooleanField(default=False, verbose_name='Faz exercício físicos?')),
                ('ja_sofreu_infarto', models.BooleanField(default=False, verbose_name='Já sofreu infarto?')),
                ('situacao_peso', models.SmallIntegerField(blank=True, choices=[(0, 'Abaixo do peso'), (1, 'Peso adequado'), (2, 'Acima do peso')], null=True, verbose_name='Situação do Peso')),
                ('tem_alguma_deficiencia', models.BooleanField(default=False, verbose_name='Acima do peso')),
                ('descricao_deficiencia', models.CharField(blank=True, help_text='Descrição de deficiência', max_length=200, verbose_name='Descrição de deficiência')),
                ('estar_gestante', models.BooleanField(default=False, verbose_name='Está gestante?')),
                ('periodo_gestacao', models.CharField(blank=True, help_text='Período da gestação?', max_length=200, verbose_name='Período da gestação?')),
                ('tem_diabetes', models.BooleanField(default=False, verbose_name='Tem diabetes?')),
                ('tipo_diabetes', models.CharField(blank=True, help_text='Descrição de diabetes', max_length=200, verbose_name='Descrição de diabetes')),
                ('tem_doenca_respiratoria_cronica_pulmao', models.BooleanField(default=False, verbose_name='Tem doença respiratória crônica / no pulmão?')),
                ('nome_doenca_respiratoria_cronica_pulmao', models.CharField(blank=True, help_text='Descrição de doença respiratória crônica / no pulmão', max_length=200, verbose_name='Descrição de doença respiratória crônica / no pulmão')),
                ('tem_doenca_cardiaca_do_coracao', models.BooleanField(default=False, verbose_name='Tem doença nos rins?')),
                ('nome_doenca_cardiaca_do_coracao', models.CharField(blank=True, help_text='Descrição de doença nos rins', max_length=200, verbose_name='Descrição de doença nos rins')),
                ('tem_doenca_rins', models.BooleanField(default=False, verbose_name='Tem doença nos rins?')),
                ('nome_doenca_rins', models.CharField(blank=True, help_text='Descrição de doença nos rins', max_length=200, verbose_name='Descrição de doença nos rins')),
                ('tem_teve_cancer', models.BooleanField(default=False, verbose_name='Tem ou teve câncer?')),
                ('tipo_cancer', models.CharField(blank=True, help_text='Descrição câncer', max_length=200, verbose_name='Descrição câncer')),
                ('teve_alguma_internacao_ultimos_12_meses', models.BooleanField(default=False, verbose_name='Teve alguma internação nos últimos 12 meses?')),
                ('causa_internacao_ultimos_12_meses', models.CharField(blank=True, help_text='Causa da internação nos últimos 12 meses', max_length=200, verbose_name='Causa da internação nos últimos 12 meses')),
                ('usa_plantas_medicinais', models.BooleanField(default=False, verbose_name='Usa plantas medicinais?')),
                ('nome_planta_medicinal', models.CharField(blank=True, help_text='Descrição plantas medicinais', max_length=200, verbose_name='Descrição plantas medicinais')),
                ('frequenta_cuidador_tradicional', models.BooleanField(default=False, verbose_name='Frequenta cuidador tradicional?')),
                ('participa_de_algum_grupo_comunitario', models.BooleanField(default=False, verbose_name='Participa de algum grupo comunitário?')),
                ('possui_plano_saude_privado', models.BooleanField(default=False, verbose_name='Possui plano de saúde privado?')),
                ('nome_beneficio', models.CharField(blank=True, max_length=200, verbose_name='Nome do beneficio recebido')),
                ('recebe_algum_beneficio', models.BooleanField(default=False, verbose_name='Recebe algum benefício?')),
                ('eh_membro_povo_comunidade_tradicional', models.BooleanField(default=False, verbose_name='É membro de povo ou comunidade tradicional?')),
                ('nome_povo_comunidade_tradicional', models.CharField(blank=True, help_text='Descrição povo ou comunidade tradicional', max_length=200, verbose_name='Descrição povo ou comunidade tradicional')),
                ('tempo_situacao_de_rua', models.SmallIntegerField(blank=True, choices=[(0, '< 6 meses'), (1, '6 a 12 meses'), (2, '1 a 5 anos'), (3, '> 5 anos')], null=True, verbose_name='Tempo situação de rua')),
                ('eh_acompanhado_por_outra_instituicao', models.BooleanField(default=False, verbose_name='É acompanhado por outra instituição?')),
                ('nome_instituicao', models.CharField(blank=True, help_text='Nome da outra instituição', max_length=200, verbose_name='Nome da outra instituição')),
                ('possui_referencia_familiar', models.BooleanField(default=False, verbose_name='Possui referência familiar?')),
                ('visita_algum_familiar_com_frequencia', models.BooleanField(default=False, verbose_name='Visita algum familiar com frequência?')),
                ('grau_parentesco', models.CharField(blank=True, help_text='Grau de parentesco', max_length=200, verbose_name='Grau de parentesco')),
                ('frequencia_diaria_alimentacao', models.SmallIntegerField(blank=True, choices=[(0, '1 vez'), (1, '2 ou 3 vezes'), (2, 'mais de 3 vezes')], null=True, verbose_name='Frequência diária alimentação')),
                ('restaurante_popular', models.BooleanField(default=False, verbose_name='Restaurante popular?')),
                ('doacao_restaurante', models.BooleanField(default=False, verbose_name='Doação de restaurante?')),
                ('doacao_grupo_religioso', models.BooleanField(default=False, verbose_name='Doação de grupo religioso?')),
                ('doacao_popular', models.BooleanField(default=False, verbose_name='Doação popular?')),
                ('doacao_outros', models.BooleanField(default=False, verbose_name='Outras doações?')),
                ('tem_acesso_a_higiene_pessoal', models.BooleanField(default=False, verbose_name='Tem acesso a higiene pessoal?')),
                ('higiene_pessoal_banho', models.BooleanField(default=False, verbose_name='Banho?')),
                ('higiene_pessoal_higiene_bocal', models.BooleanField(default=False, verbose_name='Higiene bocal?')),
                ('higiene_pessoal_acesso_sanitario', models.BooleanField(default=False, verbose_name='Acesso sanitário?')),
                ('higiene_outros', models.BooleanField(default=False, verbose_name='Outras higienes?')),
            ],
            options={
                'verbose_name': 'Anamnese de paciente',
                'verbose_name_plural': '1 - pacientes Anamneses',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AtendimentoMedico',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
            ],
            options={
                'verbose_name': 'Atendimento Médico',
                'verbose_name_plural': '4 - Atendimentos Médicos',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AtestadoAtendimento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('quantidade', models.IntegerField(verbose_name='Quantidade')),
            ],
            options={
                'verbose_name': 'Atestado Atendimento',
                'verbose_name_plural': '5 - Atendimentos Atestados',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BloqueioAgenda',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inicial', models.DateField()),
                ('data_final', models.DateField()),
                ('motivo', models.TextField()),
            ],
            options={
                'verbose_name': 'Bloqueio Agenda',
                'verbose_name_plural': 'Bloqueios Agenda',
            },
        ),
        migrations.CreateModel(
            name='BoletimPaciente',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('data_entrada', models.DateTimeField(verbose_name='Data de Entrada')),
                ('data_saida', models.DateTimeField(blank=True, null=True, verbose_name='Data de Saída')),
                ('nome_responsavel', models.CharField(blank=True, max_length=255, verbose_name='Nome do Responsável')),
                ('rg_responsavel', models.CharField(blank=True, max_length=255, verbose_name='RG do Responsável')),
                ('situacao', models.SmallIntegerField(choices=[(0, 'EM ABERTO'), (1, 'EM ANDAMENTO'), (2, 'CURADO'), (3, 'ÓBITO'), (4, 'REVELIA'), (5, 'MELHORADO'), (6, 'INALTERADO'), (7, 'TRANSFERÊNCIA'), (8, 'DECISÃO MÉDICA'), (9, 'ENCERRAMENTO ADMINISTRATIVO'), (10, 'ENCERRADO PELO SISTEMA')], default=0, verbose_name='Situação')),
            ],
            options={
                'verbose_name': 'Boletim do Paciente',
                'verbose_name_plural': '1 - Pacientes Boletins',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ClassificacaoRisco',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('data_hora_avaliacao', models.DateTimeField(help_text='Data e hora da avaliação', verbose_name='Data da avaliação')),
                ('queixa_principal', models.TextField(blank=True, null=True, verbose_name='Queixa Principal')),
                ('peso', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Peso')),
                ('altura', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Altura')),
                ('escala_dor', models.SmallIntegerField(choices=[(0, 'LEVE'), (1, 'MODERADA'), (2, 'INTENSA')], default=0, verbose_name='Escala de cor')),
                ('estado_geral', models.SmallIntegerField(choices=[(0, 'AGITAÇÃO'), (1, 'APARENTEMENTE BEM'), (2, 'CONCIENTE'), (3, 'CONVULSÃO'), (4, 'DISPINEIA INTERNA'), (5, 'GRAVE'), (6, 'ORIENTADO'), (7, 'POLITRAUMATIZADO'), (8, 'PRECORDIALGIAS'), (9, 'REGULAR'), (10, 'SINAIS DE AGRAVAMENTO')], default=0, verbose_name='Estado geral')),
                ('observacao', models.TextField(blank=True, null=True, verbose_name='Descrição')),
                ('presao_arterial', models.CharField(blank=True, max_length=10, null=True, verbose_name='Presão arterial')),
                ('frequencia_cardiaca', models.IntegerField(blank=True, null=True, verbose_name='Frequêcia cardiaca')),
                ('frequencia_respiratoria', models.IntegerField(blank=True, null=True, verbose_name='Frequêcia respiratória')),
                ('temperatura', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Presão arterial')),
                ('spo2', models.CharField(blank=True, max_length=255, null=True, verbose_name='SPO2')),
                ('hgt', models.CharField(blank=True, max_length=255, null=True, verbose_name='HGT')),
                ('tipo_atendimento', models.CharField(blank=True, choices=[('CON', 'ATENDIMENTO AMBULATORIAL'), ('BAU', 'ATENDIMENTO DE URGÊNCIA'), ('AIH', 'INTERNAÇÃO'), ('ENF', 'ATENDIMENTO DE INFERMAGEM')], max_length=3, null=True)),
                ('numero_atendimento', models.BigIntegerField(blank=True, null=True, verbose_name='Número Atendimento')),
            ],
            options={
                'verbose_name': 'Classificação de Risco',
                'verbose_name_plural': '2 - Classificações de Risco',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DiagnosticoAtendimento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descrição')),
                ('nome_arquivo', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nome do Anexo')),
                ('arquivo', models.FileField(blank=True, null=True, upload_to=publicmanager.saude_atendimento.models.diagnostico_atendimento_path, verbose_name='Arquivo')),
                ('numero_diagnostico', models.IntegerField(blank=True, null=True, verbose_name='Numero')),
            ],
            options={
                'verbose_name': 'Diagnostico Atendiemnto',
                'verbose_name_plural': '4 - Atendimentos Diagnósticos',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DocumentoPaciente',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('arquivo', models.FileField(blank=True, null=True, upload_to=publicmanager.saude_atendimento.models.documentacao_paciente_path, verbose_name='Arquivo')),
                ('nome', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome')),
                ('descricao', models.TextField(blank=True, null=True, verbose_name='Descrição')),
            ],
            options={
                'verbose_name': 'Documento do Paciente',
                'verbose_name_plural': '1 - Pacientes - Documentos',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EvolucaoAtendimento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('registro_evolucao', models.TextField(verbose_name='Resgistro da Evolução')),
                ('retorno', models.BooleanField(default=False, verbose_name='Com Retorno?')),
                ('numero_evolucao', models.IntegerField(blank=True, null=True, verbose_name='Numero')),
            ],
            options={
                'verbose_name': 'Evolução Atendimento',
                'verbose_name_plural': '4 - Atendimentos Evoluções',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ExameAtendimento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('observacao', models.TextField(verbose_name='Observação')),
                ('situacao', models.SmallIntegerField(blank=True, choices=[(0, 'SOLICITADO'), (1, 'ANEXADO')], default=0, null=True, verbose_name='Situação')),
                ('arquivo', models.FileField(blank=True, null=True, upload_to=publicmanager.saude_atendimento.models.exame_atendimento_anexo_path, verbose_name='Arquivo')),
                ('arquivo_nome', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome')),
            ],
            options={
                'verbose_name': 'Exame Atendimento',
                'verbose_name_plural': '4 - Atendimentos Exames',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Feriado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_feriado', models.CharField(help_text='Nome do Feriado', max_length=200, verbose_name='Nome do Feriado')),
                ('data_inicial', models.DateField()),
                ('data_final', models.DateField()),
            ],
            options={
                'verbose_name': 'feriado',
                'verbose_name_plural': 'feriado',
            },
        ),
        migrations.CreateModel(
            name='FichaReferenciaAtendimento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('resumo_clinico', models.TextField(blank=True, null=True, verbose_name='resumo_clinico')),
            ],
            options={
                'verbose_name': 'Ficha Referência',
                'verbose_name_plural': '7 - Fichas de Referência',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAnamnesePaciente',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Atualizado em')),
                ('tem_doenca_neurologica', models.BooleanField(default=False, verbose_name='Tem doença neurológica?')),
                ('tem_doenca_psicologica', models.BooleanField(default=False, verbose_name='Tem doença psicológica?')),
                ('tem_hipertensao_arterial', models.BooleanField(default=False, verbose_name='Tem hipertensão arterial?')),
                ('tem_doenca_do_sangue', models.BooleanField(default=False, verbose_name='Tem doença do sangue?')),
                ('fez_recebeu_transfusao_ultimos_3_meses', models.BooleanField(default=False, verbose_name='Fez ou recebeu transfusão nos últimos 3 meses?')),
                ('teve_avc_derrame', models.BooleanField(default=False, verbose_name='Teve AVC / derrame?')),
                ('estar_com_tuberculose', models.BooleanField(default=False, verbose_name='Está com tuberculose?')),
                ('estar_com_hanseniase', models.BooleanField(default=False, verbose_name='Está com hanseníase?')),
                ('estar_fumante', models.BooleanField(default=False, verbose_name='Está fumante?')),
                ('faz_uso_alcool', models.BooleanField(default=False, verbose_name='Faz uso de álcool?')),
                ('faz_uso_drogas', models.BooleanField(default=False, verbose_name='Faz uso de drogas?')),
                ('faz_exercicio_fisicos', models.BooleanField(default=False, verbose_name='Faz exercício físicos?')),
                ('ja_sofreu_infarto', models.BooleanField(default=False, verbose_name='Já sofreu infarto?')),
                ('situacao_peso', models.SmallIntegerField(blank=True, choices=[(0, 'Abaixo do peso'), (1, 'Peso adequado'), (2, 'Acima do peso')], null=True, verbose_name='Situação do Peso')),
                ('tem_alguma_deficiencia', models.BooleanField(default=False, verbose_name='Acima do peso')),
                ('descricao_deficiencia', models.CharField(blank=True, help_text='Descrição de deficiência', max_length=200, verbose_name='Descrição de deficiência')),
                ('estar_gestante', models.BooleanField(default=False, verbose_name='Está gestante?')),
                ('periodo_gestacao', models.CharField(blank=True, help_text='Período da gestação?', max_length=200, verbose_name='Período da gestação?')),
                ('tem_diabetes', models.BooleanField(default=False, verbose_name='Tem diabetes?')),
                ('tipo_diabetes', models.CharField(blank=True, help_text='Descrição de diabetes', max_length=200, verbose_name='Descrição de diabetes')),
                ('tem_doenca_respiratoria_cronica_pulmao', models.BooleanField(default=False, verbose_name='Tem doença respiratória crônica / no pulmão?')),
                ('nome_doenca_respiratoria_cronica_pulmao', models.CharField(blank=True, help_text='Descrição de doença respiratória crônica / no pulmão', max_length=200, verbose_name='Descrição de doença respiratória crônica / no pulmão')),
                ('tem_doenca_cardiaca_do_coracao', models.BooleanField(default=False, verbose_name='Tem doença nos rins?')),
                ('nome_doenca_cardiaca_do_coracao', models.CharField(blank=True, help_text='Descrição de doença nos rins', max_length=200, verbose_name='Descrição de doença nos rins')),
                ('tem_doenca_rins', models.BooleanField(default=False, verbose_name='Tem doença nos rins?')),
                ('nome_doenca_rins', models.CharField(blank=True, help_text='Descrição de doença nos rins', max_length=200, verbose_name='Descrição de doença nos rins')),
                ('tem_teve_cancer', models.BooleanField(default=False, verbose_name='Tem ou teve câncer?')),
                ('tipo_cancer', models.CharField(blank=True, help_text='Descrição câncer', max_length=200, verbose_name='Descrição câncer')),
                ('teve_alguma_internacao_ultimos_12_meses', models.BooleanField(default=False, verbose_name='Teve alguma internação nos últimos 12 meses?')),
                ('causa_internacao_ultimos_12_meses', models.CharField(blank=True, help_text='Causa da internação nos últimos 12 meses', max_length=200, verbose_name='Causa da internação nos últimos 12 meses')),
                ('usa_plantas_medicinais', models.BooleanField(default=False, verbose_name='Usa plantas medicinais?')),
                ('nome_planta_medicinal', models.CharField(blank=True, help_text='Descrição plantas medicinais', max_length=200, verbose_name='Descrição plantas medicinais')),
                ('frequenta_cuidador_tradicional', models.BooleanField(default=False, verbose_name='Frequenta cuidador tradicional?')),
                ('participa_de_algum_grupo_comunitario', models.BooleanField(default=False, verbose_name='Participa de algum grupo comunitário?')),
                ('possui_plano_saude_privado', models.BooleanField(default=False, verbose_name='Possui plano de saúde privado?')),
                ('nome_beneficio', models.CharField(blank=True, max_length=200, verbose_name='Nome do beneficio recebido')),
                ('recebe_algum_beneficio', models.BooleanField(default=False, verbose_name='Recebe algum benefício?')),
                ('eh_membro_povo_comunidade_tradicional', models.BooleanField(default=False, verbose_name='É membro de povo ou comunidade tradicional?')),
                ('nome_povo_comunidade_tradicional', models.CharField(blank=True, help_text='Descrição povo ou comunidade tradicional', max_length=200, verbose_name='Descrição povo ou comunidade tradicional')),
                ('tempo_situacao_de_rua', models.SmallIntegerField(blank=True, choices=[(0, '< 6 meses'), (1, '6 a 12 meses'), (2, '1 a 5 anos'), (3, '> 5 anos')], null=True, verbose_name='Tempo situação de rua')),
                ('eh_acompanhado_por_outra_instituicao', models.BooleanField(default=False, verbose_name='É acompanhado por outra instituição?')),
                ('nome_instituicao', models.CharField(blank=True, help_text='Nome da outra instituição', max_length=200, verbose_name='Nome da outra instituição')),
                ('possui_referencia_familiar', models.BooleanField(default=False, verbose_name='Possui referência familiar?')),
                ('visita_algum_familiar_com_frequencia', models.BooleanField(default=False, verbose_name='Visita algum familiar com frequência?')),
                ('grau_parentesco', models.CharField(blank=True, help_text='Grau de parentesco', max_length=200, verbose_name='Grau de parentesco')),
                ('frequencia_diaria_alimentacao', models.SmallIntegerField(blank=True, choices=[(0, '1 vez'), (1, '2 ou 3 vezes'), (2, 'mais de 3 vezes')], null=True, verbose_name='Frequência diária alimentação')),
                ('restaurante_popular', models.BooleanField(default=False, verbose_name='Restaurante popular?')),
                ('doacao_restaurante', models.BooleanField(default=False, verbose_name='Doação de restaurante?')),
                ('doacao_grupo_religioso', models.BooleanField(default=False, verbose_name='Doação de grupo religioso?')),
                ('doacao_popular', models.BooleanField(default=False, verbose_name='Doação popular?')),
                ('doacao_outros', models.BooleanField(default=False, verbose_name='Outras doações?')),
                ('tem_acesso_a_higiene_pessoal', models.BooleanField(default=False, verbose_name='Tem acesso a higiene pessoal?')),
                ('higiene_pessoal_banho', models.BooleanField(default=False, verbose_name='Banho?')),
                ('higiene_pessoal_higiene_bocal', models.BooleanField(default=False, verbose_name='Higiene bocal?')),
                ('higiene_pessoal_acesso_sanitario', models.BooleanField(default=False, verbose_name='Acesso sanitário?')),
                ('higiene_outros', models.BooleanField(default=False, verbose_name='Outras higienes?')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Anamnese de paciente',
                'verbose_name_plural': 'historical 1 - pacientes Anamneses',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalBoletimPaciente',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Atualizado em')),
                ('data_entrada', models.DateTimeField(verbose_name='Data de Entrada')),
                ('data_saida', models.DateTimeField(blank=True, null=True, verbose_name='Data de Saída')),
                ('nome_responsavel', models.CharField(blank=True, max_length=255, verbose_name='Nome do Responsável')),
                ('rg_responsavel', models.CharField(blank=True, max_length=255, verbose_name='RG do Responsável')),
                ('situacao', models.SmallIntegerField(choices=[(0, 'EM ABERTO'), (1, 'EM ANDAMENTO'), (2, 'CURADO'), (3, 'ÓBITO'), (4, 'REVELIA'), (5, 'MELHORADO'), (6, 'INALTERADO'), (7, 'TRANSFERÊNCIA'), (8, 'DECISÃO MÉDICA'), (9, 'ENCERRAMENTO ADMINISTRATIVO'), (10, 'ENCERRADO PELO SISTEMA')], default=0, verbose_name='Situação')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Boletim do Paciente',
                'verbose_name_plural': 'historical 1 - Pacientes Boletins',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalClassificacaoRisco',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Atualizado em')),
                ('data_hora_avaliacao', models.DateTimeField(help_text='Data e hora da avaliação', verbose_name='Data da avaliação')),
                ('queixa_principal', models.TextField(blank=True, null=True, verbose_name='Queixa Principal')),
                ('peso', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Peso')),
                ('altura', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Altura')),
                ('escala_dor', models.SmallIntegerField(choices=[(0, 'LEVE'), (1, 'MODERADA'), (2, 'INTENSA')], default=0, verbose_name='Escala de cor')),
                ('estado_geral', models.SmallIntegerField(choices=[(0, 'AGITAÇÃO'), (1, 'APARENTEMENTE BEM'), (2, 'CONCIENTE'), (3, 'CONVULSÃO'), (4, 'DISPINEIA INTERNA'), (5, 'GRAVE'), (6, 'ORIENTADO'), (7, 'POLITRAUMATIZADO'), (8, 'PRECORDIALGIAS'), (9, 'REGULAR'), (10, 'SINAIS DE AGRAVAMENTO')], default=0, verbose_name='Estado geral')),
                ('observacao', models.TextField(blank=True, null=True, verbose_name='Descrição')),
                ('presao_arterial', models.CharField(blank=True, max_length=10, null=True, verbose_name='Presão arterial')),
                ('frequencia_cardiaca', models.IntegerField(blank=True, null=True, verbose_name='Frequêcia cardiaca')),
                ('frequencia_respiratoria', models.IntegerField(blank=True, null=True, verbose_name='Frequêcia respiratória')),
                ('temperatura', models.DecimalField(blank=True, decimal_places=2, max_digits=9, null=True, verbose_name='Presão arterial')),
                ('spo2', models.CharField(blank=True, max_length=255, null=True, verbose_name='SPO2')),
                ('hgt', models.CharField(blank=True, max_length=255, null=True, verbose_name='HGT')),
                ('tipo_atendimento', models.CharField(blank=True, choices=[('CON', 'ATENDIMENTO AMBULATORIAL'), ('BAU', 'ATENDIMENTO DE URGÊNCIA'), ('AIH', 'INTERNAÇÃO'), ('ENF', 'ATENDIMENTO DE INFERMAGEM')], max_length=3, null=True)),
                ('numero_atendimento', models.BigIntegerField(blank=True, null=True, verbose_name='Número Atendimento')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Classificação de Risco',
                'verbose_name_plural': 'historical 2 - Classificações de Risco',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalListaChamada',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Atualizado em')),
                ('contagem', models.IntegerField(blank=True, default=1, null=True, verbose_name='Contagem')),
                ('situacao', models.SmallIntegerField(blank=True, choices=[(0, 'EM ESPERA'), (1, 'EM ATENDIMENTO'), (2, 'EM PROCEDIMENTO'), (3, 'RETORNO'), (4, 'EM ATENDIMENTO DE RETORNO'), (5, 'ENCERRADO PELO ATENDIMENTO'), (6, 'ENCERRADO PELA ALTA'), (7, 'ENCERRADO PELA RECEPÇÃO'), (8, 'ENCERRADO PELO SISTEMA')], default=0, help_text='situação Atual do Chamado', null=True, verbose_name='Status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Lista de CHamado',
                'verbose_name_plural': 'historical 3 - Lista de Chamados',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPaciente',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Atualizado em')),
                ('cartao_sus', models.CharField(blank=True, db_index=True, error_messages={'unique': 'Um paciente com esse número de cartão SUS já foi cadastrado.'}, help_text='Cartão SUS', max_length=15, null=True, verbose_name='Cartão SUS')),
                ('cpf', models.CharField(blank=True, db_index=True, error_messages={'unique': 'Uma pessoa física com esse cpf já foi cadastrado.'}, help_text='CPF', max_length=14, null=True, verbose_name='CPF')),
                ('rg', models.CharField(blank=True, help_text='RG', max_length=20, verbose_name='RG')),
                ('rg_orgao', models.CharField(blank=True, help_text='Orgão do RG', max_length=10)),
                ('rg_data', models.DateField(blank=True, help_text='Data da emissão do RG', null=True)),
                ('situacao', models.CharField(choices=[['ATIVO', 'ATIVO'], ['INATIVO', 'INATIVO']], default='ATIVO', max_length=7, verbose_name='Situação')),
                ('nome_paciente', models.CharField(help_text='Nome do paciente', max_length=200, verbose_name='Nome Paciente')),
                ('data_nascimento', models.DateField(help_text='Data da nascimento')),
                ('nome_social', models.CharField(blank=True, help_text='Nome social', max_length=200, verbose_name='Nome Social')),
                ('foto_paciente', models.TextField(blank=True, max_length=100, null=True)),
                ('nome_mae', models.CharField(help_text='Nome da mãe', max_length=100, verbose_name='Nome da Mãe')),
                ('nome_pai', models.CharField(blank=True, help_text='Nome do pai', max_length=100, verbose_name='Nome do Pai')),
                ('nacionalidade', models.CharField(help_text='Naturalidade', max_length=300, verbose_name='Nacionalidade')),
                ('naturalidade', models.CharField(blank=True, help_text='Naturalidade', max_length=280, verbose_name='Naturalidade')),
                ('sexo', models.CharField(choices=[['M', 'Masculino'], ['F', 'Feminino']], help_text='Sexo', max_length=1)),
                ('raca', models.SmallIntegerField(blank=True, choices=[(0, 'PARDA'), (1, 'PRETA'), (2, 'BRANCA'), (3, 'INDIGENA'), (4, 'AMARELA'), (5, 'NÃO DECLARADO')], default=5, null=True, verbose_name='Raça')),
                ('estado_civil', models.SmallIntegerField(blank=True, choices=[(0, 'SOLTEIRO(A)'), (1, 'CASADO(A)'), (2, 'DIVORCIADO(A)'), (3, 'VIÚVO(A)'), (4, 'SEPARADO(A)')], null=True, verbose_name='Estado Civil')),
                ('grau_de_instrucao', models.CharField(blank=True, choices=[['ANALFABETO', 'ANALFABETO'], ['FUNDAMENTAL COMPLETO', 'FUNDAMENTAL COMPLETO'], ['FUNDAMENTAL INCOMPLETO', 'FUNDAMENTAL INCOMPLETO'], ['LÊ E ESCREVE', 'LÊ E ESCREVE'], ['MÉDIO COMPLETO', 'MÉDIO COMPLETO'], ['MÉDIO INCOMPLETO', 'MÉDIO INCOMPLETO'], ['SUPERIOR COMPLETO', 'SUPERIOR COMPLETO'], ['SUPERIOR INCOMPLETO', 'SUPERIOR INCOMPLETO']], help_text='Grau de instrução', max_length=22)),
                ('grupo_sanguineo', models.CharField(blank=True, choices=[['A', 'A'], ['B', 'B'], ['AB', 'AB'], ['O', 'O']], help_text='Grupo Sanguíneo', max_length=2, verbose_name='Grupo Sanguíneo')),
                ('fator_rh', models.CharField(blank=True, choices=[['+', '+'], ['-', '-']], help_text='Fator RH', max_length=8, verbose_name='Fator RH')),
                ('doador_sanguineo', models.IntegerField(blank=True, choices=[(1, 'Sim'), (2, 'Não')], null=True)),
                ('doador_de_orgaos', models.IntegerField(blank=True, choices=[(1, 'Sim'), (2, 'Não')], null=True)),
                ('cep', models.CharField(blank=True, help_text='CEP', max_length=14, verbose_name='CEP')),
                ('endereco', models.CharField(help_text='Nome da rua, travessa ou avenida', max_length=200, verbose_name='Endereço')),
                ('numero', models.PositiveIntegerField(blank=True, help_text='Número', null=True, validators=[django.core.validators.MaxValueValidator(9999999999999)], verbose_name='Número')),
                ('complemento', models.CharField(blank=True, help_text='Complemento torre, sala etc', max_length=200, verbose_name='Complemento')),
                ('bairro', models.CharField(help_text='Nome do bairro', max_length=200, verbose_name='Bairro')),
                ('celular', models.CharField(blank=True, db_index=True, error_messages={'unique': 'Um paciente com esse celular já foi cadastrado.'}, help_text='Celular', max_length=15, null=True, verbose_name='Celular')),
                ('telefone_fixo', models.CharField(blank=True, db_index=True, error_messages={'unique': 'Um paciente com esse telefone fixo já foi cadastrado.'}, help_text='Telefone Fixo', max_length=14, null=True, verbose_name='Telefone Fixo')),
                ('whatsapp', models.CharField(blank=True, db_index=True, error_messages={'unique': 'Um paciente com esse WhatsApp já foi cadastrado.'}, help_text='WhatsApp', max_length=15, null=True, verbose_name='WhatsApp')),
                ('email', models.EmailField(blank=True, db_index=True, error_messages={'unique': 'Uma e-mail idêntico já foi cadastrado.'}, help_text='E-mail', max_length=254, null=True, verbose_name='E-mail')),
                ('nome_responsavel_1', models.CharField(blank=True, help_text='Nome do Responsável 1', max_length=200, verbose_name='Nome do Responsável 1')),
                ('parentesco_responsavel_1', models.CharField(blank=True, help_text='Parentesco do Responsável 1', max_length=300, verbose_name='Parentesco do Responsável 1')),
                ('cpf_responsavel_1', models.CharField(blank=True, help_text='CPF do Responsável 1', max_length=14, verbose_name='CPF do Responsável 1')),
                ('rg_responsavel_1', models.CharField(blank=True, help_text='RG do Responsável 1', max_length=20, null=True, verbose_name='RG')),
                ('celular_responsavel_1', models.CharField(blank=True, help_text='Celular do Responsável 1', max_length=15, verbose_name='Celular do Responsável 1')),
                ('whatsapp_responsavel_1', models.CharField(blank=True, help_text='WhatsApp do Responsável 1', max_length=15, verbose_name='WhatsApp do Responsável 1')),
                ('email_responsavel_1', models.EmailField(blank=True, help_text='E-mail do Responsável 1', max_length=254, verbose_name='E-mail do Responsável 1')),
                ('nome_responsavel_2', models.CharField(blank=True, help_text='Nome do Responsável 2', max_length=200, verbose_name='Nome do Responsável 2')),
                ('parentesco_responsavel_2', models.CharField(blank=True, help_text='Parentesco do Responsável 2', max_length=300, verbose_name='Parentesco do Responsável 2')),
                ('cpf_responsavel_2', models.CharField(blank=True, help_text='CPF do Responsável 1', max_length=14, verbose_name='CPF do Responsável 2')),
                ('rg_responsavel_2', models.CharField(blank=True, help_text='RG do Responsável 2', max_length=20, null=True, verbose_name='RG')),
                ('celular_responsavel_2', models.CharField(blank=True, help_text='Celular do Responsável 2', max_length=15, verbose_name='Celular do Responsável 2')),
                ('whatsapp_responsavel_2', models.CharField(blank=True, help_text='WhatsApp do Responsável 1', max_length=15, verbose_name='WhatsApp do Responsável 2')),
                ('email_responsavel_2', models.EmailField(blank=True, help_text='E-mail do Responsável 2', max_length=254, verbose_name='E-mail do Responsável 2')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Paciente',
                'verbose_name_plural': 'historical 1 - Pacientes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricoEsperaAtendimento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('situacao', models.SmallIntegerField(blank=True, choices=[(0, 'EM ESPERA'), (1, 'EM ATENDIMENTO'), (2, 'EM PROCEDIMENTO'), (3, 'RETORNO'), (4, 'EM ATENDIMENTO DE RETORNO'), (5, 'ENCERRADO PELO ATENDIMENTO'), (6, 'ENCERRADO PELA ALTA'), (7, 'ENCERRADO PELA RECEPÇÃO'), (8, 'ENCERRADO PELO SISTEMA')], default=0, help_text='situação Atual do Chamado', null=True, verbose_name='Status')),
                ('tempo_espera', models.DurationField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Histórico de Tempo de Espera do Atendimeto',
                'verbose_name_plural': 'Histórico de Tempo de Espera do Atendimeto',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HorarioMedico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana_horariomedico', models.IntegerField(choices=[(1, 'Segunda'), (2, 'Terça'), (3, 'Quarta'), (4, 'Quinta'), (5, 'Sexta'), (6, 'Sábado'), (0, 'Domingo')], default=1)),
                ('hora_inicial_horariomedico', models.TimeField()),
                ('hora_final_horariomedico', models.TimeField()),
            ],
            options={
                'verbose_name': 'Horário Médico',
                'verbose_name_plural': 'Horários Médico',
            },
        ),
        migrations.CreateModel(
            name='ListaChamada',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('contagem', models.IntegerField(blank=True, default=1, null=True, verbose_name='Contagem')),
                ('situacao', models.SmallIntegerField(blank=True, choices=[(0, 'EM ESPERA'), (1, 'EM ATENDIMENTO'), (2, 'EM PROCEDIMENTO'), (3, 'RETORNO'), (4, 'EM ATENDIMENTO DE RETORNO'), (5, 'ENCERRADO PELO ATENDIMENTO'), (6, 'ENCERRADO PELA ALTA'), (7, 'ENCERRADO PELA RECEPÇÃO'), (8, 'ENCERRADO PELO SISTEMA')], default=0, help_text='situação Atual do Chamado', null=True, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Lista de CHamado',
                'verbose_name_plural': '3 - Lista de Chamados',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Paciente',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('cartao_sus', models.CharField(blank=True, error_messages={'unique': 'Um paciente com esse número de cartão SUS já foi cadastrado.'}, help_text='Cartão SUS', max_length=15, null=True, unique=True, verbose_name='Cartão SUS')),
                ('cpf', models.CharField(blank=True, error_messages={'unique': 'Uma pessoa física com esse cpf já foi cadastrado.'}, help_text='CPF', max_length=14, null=True, unique=True, verbose_name='CPF')),
                ('rg', models.CharField(blank=True, help_text='RG', max_length=20, verbose_name='RG')),
                ('rg_orgao', models.CharField(blank=True, help_text='Orgão do RG', max_length=10)),
                ('rg_data', models.DateField(blank=True, help_text='Data da emissão do RG', null=True)),
                ('situacao', models.CharField(choices=[['ATIVO', 'ATIVO'], ['INATIVO', 'INATIVO']], default='ATIVO', max_length=7, verbose_name='Situação')),
                ('nome_paciente', models.CharField(help_text='Nome do paciente', max_length=200, verbose_name='Nome Paciente')),
                ('data_nascimento', models.DateField(help_text='Data da nascimento')),
                ('nome_social', models.CharField(blank=True, help_text='Nome social', max_length=200, verbose_name='Nome Social')),
                ('foto_paciente', models.ImageField(blank=True, null=True, upload_to=publicmanager.saude_atendimento.models.paciente_avatar_upload_to)),
                ('nome_mae', models.CharField(help_text='Nome da mãe', max_length=100, verbose_name='Nome da Mãe')),
                ('nome_pai', models.CharField(blank=True, help_text='Nome do pai', max_length=100, verbose_name='Nome do Pai')),
                ('nacionalidade', models.CharField(help_text='Naturalidade', max_length=300, verbose_name='Nacionalidade')),
                ('naturalidade', models.CharField(blank=True, help_text='Naturalidade', max_length=280, verbose_name='Naturalidade')),
                ('sexo', models.CharField(choices=[['M', 'Masculino'], ['F', 'Feminino']], help_text='Sexo', max_length=1)),
                ('raca', models.SmallIntegerField(blank=True, choices=[(0, 'PARDA'), (1, 'PRETA'), (2, 'BRANCA'), (3, 'INDIGENA'), (4, 'AMARELA'), (5, 'NÃO DECLARADO')], default=5, null=True, verbose_name='Raça')),
                ('estado_civil', models.SmallIntegerField(blank=True, choices=[(0, 'SOLTEIRO(A)'), (1, 'CASADO(A)'), (2, 'DIVORCIADO(A)'), (3, 'VIÚVO(A)'), (4, 'SEPARADO(A)')], null=True, verbose_name='Estado Civil')),
                ('grau_de_instrucao', models.CharField(blank=True, choices=[['ANALFABETO', 'ANALFABETO'], ['FUNDAMENTAL COMPLETO', 'FUNDAMENTAL COMPLETO'], ['FUNDAMENTAL INCOMPLETO', 'FUNDAMENTAL INCOMPLETO'], ['LÊ E ESCREVE', 'LÊ E ESCREVE'], ['MÉDIO COMPLETO', 'MÉDIO COMPLETO'], ['MÉDIO INCOMPLETO', 'MÉDIO INCOMPLETO'], ['SUPERIOR COMPLETO', 'SUPERIOR COMPLETO'], ['SUPERIOR INCOMPLETO', 'SUPERIOR INCOMPLETO']], help_text='Grau de instrução', max_length=22)),
                ('grupo_sanguineo', models.CharField(blank=True, choices=[['A', 'A'], ['B', 'B'], ['AB', 'AB'], ['O', 'O']], help_text='Grupo Sanguíneo', max_length=2, verbose_name='Grupo Sanguíneo')),
                ('fator_rh', models.CharField(blank=True, choices=[['+', '+'], ['-', '-']], help_text='Fator RH', max_length=8, verbose_name='Fator RH')),
                ('doador_sanguineo', models.IntegerField(blank=True, choices=[(1, 'Sim'), (2, 'Não')], null=True)),
                ('doador_de_orgaos', models.IntegerField(blank=True, choices=[(1, 'Sim'), (2, 'Não')], null=True)),
                ('cep', models.CharField(blank=True, help_text='CEP', max_length=14, verbose_name='CEP')),
                ('endereco', models.CharField(help_text='Nome da rua, travessa ou avenida', max_length=200, verbose_name='Endereço')),
                ('numero', models.PositiveIntegerField(blank=True, help_text='Número', null=True, validators=[django.core.validators.MaxValueValidator(9999999999999)], verbose_name='Número')),
                ('complemento', models.CharField(blank=True, help_text='Complemento torre, sala etc', max_length=200, verbose_name='Complemento')),
                ('bairro', models.CharField(help_text='Nome do bairro', max_length=200, verbose_name='Bairro')),
                ('celular', models.CharField(blank=True, error_messages={'unique': 'Um paciente com esse celular já foi cadastrado.'}, help_text='Celular', max_length=15, null=True, unique=True, verbose_name='Celular')),
                ('telefone_fixo', models.CharField(blank=True, error_messages={'unique': 'Um paciente com esse telefone fixo já foi cadastrado.'}, help_text='Telefone Fixo', max_length=14, null=True, unique=True, verbose_name='Telefone Fixo')),
                ('whatsapp', models.CharField(blank=True, error_messages={'unique': 'Um paciente com esse WhatsApp já foi cadastrado.'}, help_text='WhatsApp', max_length=15, null=True, unique=True, verbose_name='WhatsApp')),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'Uma e-mail idêntico já foi cadastrado.'}, help_text='E-mail', max_length=254, null=True, unique=True, verbose_name='E-mail')),
                ('nome_responsavel_1', models.CharField(blank=True, help_text='Nome do Responsável 1', max_length=200, verbose_name='Nome do Responsável 1')),
                ('parentesco_responsavel_1', models.CharField(blank=True, help_text='Parentesco do Responsável 1', max_length=300, verbose_name='Parentesco do Responsável 1')),
                ('cpf_responsavel_1', models.CharField(blank=True, help_text='CPF do Responsável 1', max_length=14, verbose_name='CPF do Responsável 1')),
                ('rg_responsavel_1', models.CharField(blank=True, help_text='RG do Responsável 1', max_length=20, null=True, verbose_name='RG')),
                ('celular_responsavel_1', models.CharField(blank=True, help_text='Celular do Responsável 1', max_length=15, verbose_name='Celular do Responsável 1')),
                ('whatsapp_responsavel_1', models.CharField(blank=True, help_text='WhatsApp do Responsável 1', max_length=15, verbose_name='WhatsApp do Responsável 1')),
                ('email_responsavel_1', models.EmailField(blank=True, help_text='E-mail do Responsável 1', max_length=254, verbose_name='E-mail do Responsável 1')),
                ('nome_responsavel_2', models.CharField(blank=True, help_text='Nome do Responsável 2', max_length=200, verbose_name='Nome do Responsável 2')),
                ('parentesco_responsavel_2', models.CharField(blank=True, help_text='Parentesco do Responsável 2', max_length=300, verbose_name='Parentesco do Responsável 2')),
                ('cpf_responsavel_2', models.CharField(blank=True, help_text='CPF do Responsável 1', max_length=14, verbose_name='CPF do Responsável 2')),
                ('rg_responsavel_2', models.CharField(blank=True, help_text='RG do Responsável 2', max_length=20, null=True, verbose_name='RG')),
                ('celular_responsavel_2', models.CharField(blank=True, help_text='Celular do Responsável 2', max_length=15, verbose_name='Celular do Responsável 2')),
                ('whatsapp_responsavel_2', models.CharField(blank=True, help_text='WhatsApp do Responsável 1', max_length=15, verbose_name='WhatsApp do Responsável 2')),
                ('email_responsavel_2', models.EmailField(blank=True, help_text='E-mail do Responsável 2', max_length=254, verbose_name='E-mail do Responsável 2')),
                ('anamnese_paciente', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='saude_atendimento.anamnesepaciente')),
                ('estado', models.ForeignKey(help_text='Estado', on_delete=django.db.models.deletion.CASCADE, to='comum.estado')),
                ('municipio', smart_selects.db_fields.ChainedForeignKey(chained_field='estado', chained_model_field='estado', on_delete=django.db.models.deletion.CASCADE, to='comum.municipio')),
                ('profissao', models.ForeignKey(blank=True, help_text='Profissão', null=True, on_delete=django.db.models.deletion.CASCADE, to='saude_cadastro.profissao')),
                ('rg_uf', models.ForeignKey(blank=True, help_text='UF da emissão do RG', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='paciente_rg_uf_set', to='comum.estado')),
                ('unidade_saude', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='saude.unidadesaude', verbose_name='Unidade de Saúde')),
            ],
            options={
                'verbose_name': 'Paciente',
                'verbose_name_plural': '1 - Pacientes',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TipoAltaHospitalar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('nome', models.CharField(max_length=50, unique=True, verbose_name='Nome')),
                ('situacao', models.CharField(choices=[('ATIVO', 'ATIVO'), ('INATIVO', 'INATIVO')], default='ATIVO', max_length=7, verbose_name='Situação')),
            ],
            options={
                'verbose_name': 'Tipos de Alta Hospitalar',
                'verbose_name_plural': 'Tipo de Alta Hospitalar',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProcedimentoAtendimento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('quantidade', models.IntegerField(verbose_name='Quantidade')),
                ('arquivo', models.FileField(blank=True, null=True, upload_to=publicmanager.saude_atendimento.models.procedimento_atendimento_anexo_path, verbose_name='Arquivo')),
                ('arquivo_nome', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome')),
                ('classificacao', models.SmallIntegerField(choices=[(0, 'PRINCIPAL'), (1, 'SECUNDARIO')], verbose_name='Classificação')),
                ('atendimento', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='atendimento_procedimento_atendimento_set', to='saude_atendimento.atendimentomedico')),
                ('procedimento', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='saude_cadastro.procedimento')),
                ('profissional', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='profissional_procedimento_atendimento_set', to='saude_cadastro.profissional')),
            ],
            options={
                'verbose_name': 'Procedimento do atendimento',
                'verbose_name_plural': '4 - atendimentos Procedimentos',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PreAtendimentoMedico',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('data_entrada', models.DateTimeField(help_text='Data e hora do pré-atendimento', verbose_name='Data e hora de entrada')),
                ('queixa_principal', models.TextField(verbose_name='Queixa Principal')),
                ('peso', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Peso')),
                ('altura', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, verbose_name='Altura')),
                ('escala_dor', models.SmallIntegerField(choices=[(0, 'LEVE'), (1, 'MODERADA'), (2, 'INTENSA')], default=0, verbose_name='Escala de cor')),
                ('estado_geral', models.SmallIntegerField(choices=[(0, 'AGITAÇÃO'), (1, 'APARENTEMENTE BEM'), (2, 'CONCIENTE'), (3, 'CONVULSÃO'), (4, 'DISPINEIA INTERNA'), (5, 'GRAVE'), (6, 'ORIENTADO'), (7, 'POLITRAUMATIZADO'), (8, 'PRECORDIALGIAS'), (9, 'REGULAR'), (10, 'SINAIS DE AGRAVAMENTO')], default=0, verbose_name='Estado geral')),
                ('observacao', models.TextField(blank=True, verbose_name='Descrição')),
                ('presao_arterial', models.CharField(blank=True, help_text='Pressão arterial', max_length=7, verbose_name='Pressão arterial')),
                ('frequencia_cardiaca', models.PositiveIntegerField(blank=True, help_text='Frequência Cardíaca', null=True, verbose_name='Frequência Cardíaca')),
                ('frequencia_respiratoria', models.PositiveIntegerField(blank=True, help_text='Frequência Respiratória', null=True, verbose_name='Frequência Respiratória')),
                ('temperatura', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Temperatur')),
                ('spo2', models.PositiveIntegerField(blank=True, help_text='SpO2', null=True, verbose_name='SpO2')),
                ('hgt', models.PositiveIntegerField(blank=True, help_text='hgt', null=True, verbose_name='hgt')),
                ('situacao', models.SmallIntegerField(blank=True, choices=[(0, 'EM ABERTO'), (1, 'EM ANDAMENTO'), (2, 'CURADO'), (3, 'ÓBITO'), (4, 'REVELIA'), (5, 'MELHORADO'), (6, 'INALTERADO'), (7, 'TRANSFERÊNCIA'), (8, 'DECISÃO MÉDICA'), (9, 'ENCERRAMENTO ADMINISTRATIVO'), (10, 'ENCERRADO PELO SISTEMA')], default=0, verbose_name='Situação')),
                ('data_saida', models.DateTimeField(blank=True, help_text='Data e hora do término do atendimento', null=True, verbose_name='Data e hora de saída')),
                ('agendamento_atendimento', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agendamento_atendimento_atendimento_set', to='saude_atendimento.agendamentoconsultorio', verbose_name='Agendamento de atendimento')),
                ('paciente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paciente_atendimento_set', to='saude_atendimento.paciente')),
                ('tipo_classificacao_risco', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='saude_cadastro.tipoclassificacaorisco')),
            ],
            options={
                'verbose_name': 'Atendimento',
                'verbose_name_plural': 'Atendimento',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MedicacaoAtendimento',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Registrado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('admin_medicamentosa', models.SmallIntegerField(choices=[(0, 'ORAL'), (1, 'PARENTAL'), (2, 'SUBCUTÂNIA'), (3, 'NASAL'), (4, 'RETAL'), (5, 'INTRAVESICAL'), (6, 'NEBOLIZAÇÃO'), (7, 'OCULAR'), (8, 'SUBLINGUAL')], verbose_name='Via de Administação Medicamentosa')),
                ('tipo_parenteral', models.SmallIntegerField(blank=True, choices=[(0, 'INTRAVENISA'), (1, 'INTRAMUSCULAR'), (2, 'SUBCUTÂNIA'), (3, 'INTRATECAL')], null=True, verbose_name='Tipo Parental')),
                ('aplicacao', models.SmallIntegerField(blank=True, choices=[(0, 'IMEDIATA'), (1, 'POSTERIOR')], null=True, verbose_name='Aplicação')),
                ('dosagem', models.CharField(max_length=30, verbose_name='Dosagem')),
                ('posologia', models.CharField(blank=True, max_length=20, null=True, verbose_name='Posologia')),
                ('uso_continuo', models.BooleanField(default=False, verbose_name='Uso contínuo?')),
                ('duracao_tratamento', models.IntegerField(blank=True, null=True, verbose_name='Duração do Tratamento')),
                ('observacao', models.TextField(blank=True, null=True, verbose_name='Observação')),
                ('situacao', models.SmallIntegerField(choices=[(0, 'SOLICITADO'), (1, 'PARCIALMENTE APLICADO'), (2, 'SUSPENSO'), (3, 'CONCLUÍDO')], default=0, verbose_name='Situação')),
                ('atendimento', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='saude_atendimento.atendimentomedico')),
            ],
            options={
                'verbose_name': 'Medicação do Atendimento',
                'verbose_name_plural': '4 - Atendimentos Medicações',
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
    ]
